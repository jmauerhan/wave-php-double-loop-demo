<?php declare(strict_types=1);

namespace Test\Unit\Chirp;

use Chirper\Chirp\Chirp;
use Chirper\Chirp\ChirpPersistenceDriver;
use Chirper\Chirp\CreateAction;
use Chirper\Chirp\InvalidChirpResponse;
use Chirper\Chirp\InvalidJsonException;
use Chirper\Chirp\JsonChirpTransformer;
use Chirper\Http\Request;
use PHPUnit\Framework\MockObject\MockObject;
use Test\TestCase;

class CreateActionTest extends TestCase
{
    /** @var ChirpPersistenceDriver|MockObject */
    private $persistenceDriver;
    /** @var JsonChirpTransformer|MockObject */
    private $chirpTransformer;

    public function setUp()
    {
        $this->chirpTransformer  = $this->createMock(JsonChirpTransformer::class);
        $this->persistenceDriver = $this->createMock(ChirpPersistenceDriver::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateSendsRequestToTransformer()
    {
        $body    = "{}";
        $request = new Request('POST', 'chirp', [], $body);

        $this->chirpTransformer->expects($this->once())
                               ->method('toChirp')
                               ->with($body);

        $action = new CreateAction($this->chirpTransformer, $this->persistenceDriver);
        $action->create($request);
    }

    public function testCreateReturnsInvalidChirpResponseOnTransformerException()
    {
        $exception = new InvalidJsonException();
        $this->chirpTransformer->method('toChirp')
                               ->willThrowException($exception);

        $request  = new Request('POST', 'chirp', [], "{}");
        $action   = new CreateAction($this->chirpTransformer, $this->persistenceDriver);
        $response = $action->create($request);
        $this->assertInstanceOf(InvalidChirpResponse::class, $response);
    }

    public function testCreateSendsChirpToPersistence()
    {
        $chirp = new Chirp();
        $this->chirpTransformer->method('toChirp')
                               ->willReturn($chirp);

        $this->persistenceDriver->expects($this->once())
                                ->method('save')
                                ->with($chirp);

        $request = new Request('POST', 'chirp', [], "{}");
        $action  = new CreateAction($this->chirpTransformer, $this->persistenceDriver);
        $action->create($request);
    }
//
//    public function testCreateReturnsInternalServerErrorResponseOnPeristenceException()
//    {
//    }
//
//    public function testCreateSendsSavedChirpToTransformer()
//    {
//    }
//
//    public function testCreateReturnsInternalServerErrorResponseOnTransformerException()
//    {
//    }
//
//    public function testCreateReturnChirpCreateResponseOnSuccess()
//    {
//    }
}
